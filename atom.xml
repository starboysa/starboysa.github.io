<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacob McPeak]]></title>
  <link href="http://starboysa.github.io/atom.xml" rel="self"/>
  <link href="http://starboysa.github.io/"/>
  <updated>2018-09-26T19:16:21-07:00</updated>
  <id>http://starboysa.github.io/</id>
  <author>
    <name><![CDATA[Jacob McPeak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diablo 3 And Path of Exile Networking Breakdown]]></title>
    <link href="http://starboysa.github.io/blog/2018/09/25/diablo3andpoenetworkingbreakdown/"/>
    <updated>2018-09-25T19:37:17-07:00</updated>
    <id>http://starboysa.github.io/blog/2018/09/25/diablo3andpoenetworkingbreakdown</id>
    <content type="html"><![CDATA[<p>Blizzard is visiting DigiPen on Thursday (9/27/2018) and to market myself to them I&rsquo;m going to do a small scale network analysis on Diablo 3 (my favorite of their games).
In order to do so, I&rsquo;ll be comparing everything I find in Diablo 3 to what I can find in Path of Exile, Diablo 3&rsquo;s main competitor.
Let&rsquo;s get to it.</p>

<h3>Latency</h3>


<p>First thing to get out of the way: both Diablo and PoE do their networking over TCP.
This incurs an amount of latency due to Nagle&rsquo;s algorithm and naive packet loss handling.
Like WoW and other games that use TCP for their networking both Diablo 3 and PoE set the PUSH flag to avoid Nagle&rsquo;s for packets being sent by the server, but packets generated by the client aren&rsquo;t setting the PUSH flag and therefore are using Nagle&rsquo;s.
Setting the PUSH flag is a registry thing in windows so doing so is outside the realm of a normal user.
Using Nagle&rsquo;s client side algorithm is going to cause some latency, but not anymore than a game on UDP that buffers gameplay inputs.
In general, ARGs like Diablo and PoE&rsquo;s player interaction isn&rsquo;t frequent so the latency doesn&rsquo;t have to be incredibly low.
The only examples I can think of from Diablo are buffs, debuffs, and crowd control.
These games can get away with a bit more latency than high-paced shooters like Overwatch, CoD, and Fortnite.
The aforementioned games run server updates at 60Hz to enforce fairness in the competitive environment whereas in Diablo and PoE the majority of the game is PvE so they can get away with lower refresh rates.</p>

<p>So for these two games:</p>

<table>
  <thead>
    <th>Game</th>
    <th>Client/Server Send Rate while idle</th>
    <th>Client/Server Send Rate just walking</th>
    <th>Client/Server Send Rate full gameplay</th>
    <th>Movement Response Time</th>
    <th>Ability Response Time</th>
    <th>Game Reported Ping</th>
    <th>ICMP RTT</th>
  </thead>
  <tbody>
    <tr>
      <td>
        Diablo 3
      </td>
      <td>
        5/5 Hz
      </td>
      <td>
        15/15 Hz
      </td>
      <td>
        30/40 Hz
      </td>
      <td>
        81 ms
      </td>
      <td>
        65 ms
      </td>
      <td>
        95 ms
      </td>
      <td>
        38 ms
      </td>
    </tr>
    <tr>
      <td>
        Path of Exile
      </td>
      <td>
        20/33 Hz
      </td>
      <td>
        30/35 Hz
      </td>
      <td>
        32/40 Hz
      </td>
      <td>
        136 ms
      </td>
      <td>
        111 ms
      </td>
      <td>
        40 ms
      </td>
      <td>
        38 ms
      </td>
    </tr>
  </tbody>
</table>


<p>Latency tests done by recording gameplay and keyboard footage at 120 FPS and then counting the frames it takes for the character to begin their animation. Not the most scientific, but it&rsquo;s something.</p>

<p>The actual game session servers blocks ICMP so I pinged the closest ip according to tracert (24.105.30.129) for the listed RTT.</p>

<p>PoE&rsquo;s latency might be a little skewed due to the game being poorly optimized and running slowly on my computer, but I don&rsquo;t feel bad because with my GTX 1070 I&rsquo;m still an above average consumer.</p>

<p>PoE&rsquo;s packets Up/Down have high amounts of variance during gameplay. The client bounces between 26 Hz and 36 Hz frequently and the server bounces between 35 Hz and 50 Hz.</p>

<h3>Bandwidth</h3>




<table>
  <thead>
    <th>Game</th>
    <th>Up</th>
    <th>Down</th>
  </thead>
  <tbody>
    <tr>
      <td>Diablo 3</td>
      <td>1533 bits/s</td>
      <td>38k bits/s</td>
    </tr>
    <tr>
      <td>Path of Exile</td>
      <td>748 bits/s</td>
      <td>32k bits/s</td>
    </tr>
  </tbody>
</table>


<p>Both games use very little bandwidth. That&rsquo;s pretty impressive for the amount of enemies that are on the screen at once.</p>

<h3>Network Topology</h3>




<h4>* This section contains a lot of conjecture. *</h4>


<p>Diablo sets a great example.</p>

<p>The first connection is to a Battle.net login server.
You log in over 443 which makes me think its an HTTPS REST call which is a great way to do authentication (according to Facebook and Google).
You then get sent to the regional server to download your character info and connected to various other servers to manage global chat, Battle.net friends lists, etc.
When you start a session you&rsquo;re given a session server to play on which allows Blizzard to enforce DRM and loot validity.
I remember the Borderlands games had big issues with players tampering with loot because that game was peer-to-peer so moving to client-server in order to maintain fairness (especially since Diablo shipped with an auctionhouse) is a good choice.
Blizzard also hosts their own servers since they&rsquo;ve been doing this before &ldquo;The Cloud&rdquo; was a big thing.
Simple, scalable, everything you&rsquo;d want from a well designed network topology.</p>

<p>This is where I become disappointed.
Path of Exile is really bad at this.</p>

<p>The login process is normal.
From what I can tell it&rsquo;s custom socket stuff, but it could just be REST on a different port.
You&rsquo;re regional server manages only the character lists.
When you start playing you are then moved to an in-game location specific server.
Yes, in an ARPG where 95% of the game is either solo or a party of up to 8, the network topology of PoE is more similar to that of a full-on MMO.
Sll the chat and friends lists features also get funneled through the location specific server.
The town areas are the only areas where the player can see and interact with random players also in that town.
The big problem is even if I&rsquo;m playing by myself every time I move to a new area I have to do a host migration.
This makes me believe that the original plan for PoE was more MMO-like with players encountering each other in the world more often, but something changed or there was a technological limitation so they switched gears.</p>

<p>These instance servers are hosted by a cloud hosting company called INAP.
Apparently Hi-Rez also uses INAP so it doesn&rsquo;t seem that bad; they have well placed servers across NA, EU, Oceania, but they seem to lack servers in South America and Africa which is a bummer.
PoE&rsquo;s network topology made me think I was looking at a different game and that saddened me.
I hope they eventually move to a better model, but that would definitely cost a lot of money.</p>

<h3>Conclusion</h3>


<p>Comparatively, the games preform very similarly from both a latency and bandwidth perspective, but PoE&rsquo;s network topology doesn&rsquo;t make much sense for the game they shipped so I prefer Diablo'3 networking model overall.
Kind of glad I reached that conclusion too; it would have been awkward to apply to Blizzard with a blog post containing a dis-favorable comparison to one of their largest competitors in the field.</p>

<p>Both game&rsquo;s could still improve.
Their state replication layers seem to work fine for the kind of games they are, but if they start to dabble with more time sensitive gameplay mechanics or some form of serious PvP combat they should consider moving off of TCP and increasing server update rates.
Also, PoE should get its networking topology together, but it never will because it&rsquo;s already shipped so I&rsquo;m just going to have to live with this knowledge for the rest of my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Short and Long of C++ Type Introspection]]></title>
    <link href="http://starboysa.github.io/blog/2017/03/01/the-short-and-long-of-cpp-type-introspection/"/>
    <updated>2017-03-01T12:06:20-07:00</updated>
    <id>http://starboysa.github.io/blog/2017/03/01/the-short-and-long-of-cpp-type-introspection</id>
    <content type="html"><![CDATA[<p>I first wrote this blog post a year ago, but a misplaced sense of responsibility has called me to keep it updated. The first time I wrote this article I considered it a good resource for other DigiPen students who might be implementing a similar system. I was doing my part.</p>

<p>The first time I updated this post was October 19th of last year (2017) after some time working with a team that utilized an identical system to the one outlined in the article. I decided to update it because the optimism and faith I had in my first post was misplaced. I wanted to warn those who had read the previous post about the beasts I had encountered using my own guidelines. I was doing what was right.</p>

<p>Now with almost another year under my belt and full C++ type reflection being considered for the C++ standard I feel it is necessary to come back for a complete rewrite to tell you: I was wrong.</p>

<p>You see, C++ Type Introspection is a loosing battle. Until it makes its way into the standard, there will be no right way to hack it into your project. Just a list of bad ways. Poisons upon you&rsquo;re entire project and especially its build systems. If you have come here seeking the optimistic guidance that once lived here instead you find I, the merchant of death, that shall at least inform you of toxin you shall soon swallow.</p>

<p>Before I let you do your shopping we first must get some terminology straight:</p>

<ul>
<li>Type Introspection: The ability to interact a class' members and methods at runtime</li>
<li>Type Reflection: Type Introspection + the ability to add/remove members and methods at runtime</li>
</ul>


<p>These are technical definitions which I will use throughout this article, but everyone just calls introspection reflection (even the standard). It makes sense for C++ because I don&rsquo;t see the standard getting true Type Reflection ever. It would compromise performance.  However, I&rsquo;ll be careful because (DigiPen students take note): there are other languages than C++ and this distinction is important.</p>

<p>So back to C++. I&rsquo;m familiar with two ways to create custom C++ type introspection both of which I&rsquo;ll outline on this blog in later posts. For this blog I&rsquo;m going to go over aspects that affect both methods; starting with what makes a good implementation:</p>

<p>A good implementation will:</p>

<ul>
<li>have minimal impact on build times</li>
<li>have a clean interface for adding new managed types</li>
<li>have readable intermediary code for reasonable debugging</li>
<li>be as simple as possible while still while implementing everything that's necessary</li>
</ul>


<p>So what is &ldquo;necessary&rdquo;? The simplest yet still useful Type Introspection system that is still useful can:</p>

<ul>
<li>be able to register both user defined types and basic/library types to be managed by the introspection system</li>
<li>represent a compiled C++ class at runtime with an object</li>
<li>get a list of class members</li>
<li>be able to retrieve the values of those members</li>
<li>be able to set the values of those members</li>
<li>get a list of class methods</li>
<li>be able to call those methods provided with a instance of the class</li>
<li>get the size of the class</li>
<li>construct the class into a byte buffer</li>
</ul>


<p>(Makin good use of those lists)</p>

<p>So yea, that&rsquo;s a lot just for the simplest implementation. This is the minimum in order to use the introspection system in order to write generic serialization code which was my original reason for implementing introspection.</p>

<p>However, some cool things you can do with an introspection system:</p>

<ul>
<li>automatically build editor UI for managed types</li>
<li>automatically reveal managed types to a scripting language</li>
</ul>


<p>So that isn&rsquo;t a lot really, but overall the coolest thing about having introspection is being able to write scalable code. If you use introspection to write a serialization system any class managed by the introspection can be written and read from a file which is a huge win. That doesn&rsquo;t seem that impressive when you consider C# has a standard library function for that, but C# is <a href="https://attractivechaos.github.io/plb/">slower</a> for other reasons so we&rsquo;re stuck with C++.</p>

<p>From here I&rsquo;ll direct you to the two different methods of implementation:</p>

<ul>
<li>Hiding breadcrumbs in managed classes and parsing them in clang's AST</li>
<li>Macro and template wizardry</li>
</ul>

]]></content>
  </entry>
  
</feed>
